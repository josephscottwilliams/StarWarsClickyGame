{"version":3,"sources":["components/Card.js","components/Header.js","components/Nav.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Card","props","src","image","className","id","onClick","click","alt","Header","Nav","score","highScore","App","state","clickedItems","characters","shuffleCards","i","length","j","Math","floor","random","temp","setState","displayNewOrder","this","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"63DAWeA,MARf,SAAcC,GACZ,OAEE,yBAAKC,IAAKD,EAAME,MAAOC,UAAU,gBAAgBC,GAAIJ,EAAMI,GAAIC,QAAS,WAAML,EAAMM,MAAMN,EAAMI,KAAMG,IAAI,MCI/FC,MARf,WACA,OAAM,yBAAKL,UAAU,aACrB,wBAAIA,UAAU,aAAd,8BACI,uBAAGA,UAAU,QAAb,4EACA,wBAAIA,UAAU,W,QCOHM,MATf,SAAaT,GACT,OAAM,qCAAKG,UAAU,gCAAf,YAAwD,WAC9D,4BACI,wBAAIA,UAAU,SAAd,eACA,wBAAIA,WAAS,GAAb,gCACA,sCAAYH,EAAMU,MAAlB,iBAAuCV,EAAMW,c,QCuEtCC,E,2MArEbC,MAAQ,CACNH,MAAO,EACPC,UAAW,EACXG,aAAc,GACdC,WAAYA,G,EAGdC,aAAe,SAACZ,GAEZ,IAAK,IAAIa,EAAIb,EAAGc,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACpC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOnB,EAAGa,GACdb,EAAGa,GAAKb,EAAGe,GACXf,EAAGe,GAAKI,EAgBd,OAPA,EAAKC,SAAS,CACZd,MAAM,EAAKG,MAAMH,MAAQ,EACzBC,UAAU,EAAKE,MAAMF,UAAY,EACjCG,aAAa,GAAD,mBAAM,EAAKD,MAAMC,cAAjB,CAA+BV,MAItCA,G,EAITqB,gBAAkB,WAChB,EAAKD,SAAS,CACZT,WAAY,EAAKC,aAAaD,M,wEAMxB,IAAD,OAGP,OACE,yBAAKZ,UAAU,OACX,kBAAC,EAAD,CACAO,MAAOgB,KAAKb,MAAMH,MAClBC,UAAWe,KAAKb,MAAMF,YAEtB,kBAAC,EAAD,MACA,yBAAKR,UAAU,YAChBY,EAAWY,KAAI,SAAAZ,GAAU,OAC1B,kBAAC,EAAD,CACEX,GAAIW,EAAWX,GACfwB,IAAKb,EAAWX,GAChBF,MAAOa,EAAWb,MAClBI,MAAO,EAAKmB,2B,GA3DJI,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f51c2c86.chunk.js","sourcesContent":["import React from \"react\"\nimport { directive } from \"@babel/types\";\n\nfunction Card(props) {\n  return (\n\n    <img src={props.image} className=\"custom-images\" id={props.id} onClick={() =>{props.click(props.id)}} alt=\"\"></img>\n\n  )\n  }\n\nexport default Card;","import React from 'react';\n\nfunction Header() {\nreturn<div className=\"jumbotron\">\n<h1 className=\"display-4\">The Star Wars Clicky Game!</h1>\n    <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n    <hr className=\"my-4\"></hr>\n</div>\n}\n\nexport default Header;","import React from \"react\"\n// import { directive, tsPropertySignature } from \"@babel/types\"\n\n\nfunction Nav(props) {\n    return<nav className=\"navbar navbar-light bg-light\" className=\"navText\">\n    <ul>\n        <li className=\"brand\">Clicky Game</li>\n        <li className>Click an image to begin with</li>\n        <li>Score: {props.score} | Top Score: {props.highScore}</li>\n    </ul>\n    </nav>\n}\nexport default Nav;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card';\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport characters from \"./characters.json\";\n\n\nclass App extends React.Component {\n\n  state = {\n    score: 0,\n    highScore: 0,\n    clickedItems: [],\n    characters: characters\n  }\n\n  shuffleCards = (id) =>{\n    \n      for (var i = id.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var temp = id[i];\n          id[i] = id[j];\n          id[j] = temp;\n      }\n      \n    // if(this.clickedItems.includes(id)){\n    //   //game over\n    //   //else{score++\n      \n    // }\n  //   console.log(id);\n    this.setState({\n      score:this.state.score + 1,\n      highScore:this.state.highScore + 1,\n      clickedItems: [...this.state.clickedItems, id]\n      \n    })\n  // console.log(this.state.clickedItems);\n    return id;\n\n  }\n\n  displayNewOrder = () =>{\n    this.setState({\n      characters: this.shuffleCards(characters)\n\n    })\n  }\n\n\n  render() {\n    const images = [];\n\n    return (\n      <div className=\"App\">\n          <Nav \n          score={this.state.score}\n          highScore={this.state.highScore}\n          />\n          <Header />\n          <div className=\"main-div\">\n        {characters.map(characters => \n        <Card\n          id={characters.id}\n          key={characters.id}\n          image={characters.image}\n          click={this.displayNewOrder}\n        />)}\n        </div>\n      </div>\n    );\n    \n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}